{"ast":null,"code":"var _jsxFileName = \"/Users/dangnhat/Documents/Nie\\u0302n lua\\u0323\\u0302n ma\\u0323ng ma\\u0301y ti\\u0301nh*** /BlogReact/src/components/PostList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Grid } from '@material-ui/core';\nimport axios from 'axios';\nimport Post from './Post';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PostList() {\n  _s();\n  const [news, setNews] = useState([]);\n\n  // useEffect(() => {\n  //     async function fetchNews() {\n  //         try {\n  //             const response = await axios.get('http://localhost:3001/api/v1/news');\n  //             setNews(response.data.data.news);\n  //         } catch (error) {\n  //             console.error('Error fetching news:', error);\n  //         }\n  //     }\n\n  //     fetchNews();\n  // }, []); \n\n  useEffect(() => {\n    fetchNews();\n  }, []);\n  const fetchNews = async () => {\n    try {\n      const response = await axios.get('http://localhost:3001/api/v1/news');\n      setNews(response.data.data.news.reverse()); // Đảo ngược danh sách bài viết để bài mới nhất xuất hiện đầu danh sách\n    } catch (error) {\n      console.error('Error fetching news:', error);\n    }\n  };\n  const handleDeletePost = async postId => {\n    try {\n      // Gửi yêu cầu DELETE đến API endpoint để xóa bài post\n      await axios.delete(`http://localhost:3001/api/v1/posts/${postId}`);\n\n      // Cập nhật state để loại bỏ bài post đã xóa\n      //   const updatedNews = news.filter(item => item._id !== postId);\n      //   setNews(updatedNews);\n      fetchNews();\n    } catch (error) {\n      console.error('Error deleting post:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      alignItems: \"stretch\",\n      justifyContent: \"center\",\n      style: {\n        paddingTop: \"20px\"\n      },\n      children: news.map(item => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          newId: item._id,\n          title: item.title,\n          image: item.image,\n          content: item.content,\n          author: item.author,\n          onDelete: () => handleDeletePost(item._id),\n          createdAt: moment(item.createdAt).format('YYYY-MM-DD')\n        }, item._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, item._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(PostList, \"z/85X+TkTtxCb0PBzmDGtQlYstQ=\");\n_c = PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useEffect","useState","Grid","axios","Post","moment","jsxDEV","_jsxDEV","PostList","_s","news","setNews","fetchNews","response","get","data","reverse","error","console","handleDeletePost","postId","delete","children","container","spacing","alignItems","justifyContent","style","paddingTop","map","item","xs","sm","newId","_id","title","image","content","author","onDelete","createdAt","format","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dangnhat/Documents/Niên luận mạng máy tính*** /BlogReact/src/components/PostList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Grid } from '@material-ui/core';\nimport axios from 'axios';\nimport Post from './Post'; \nimport moment from 'moment';\n\nexport default function PostList() {\n    const [news, setNews] = useState([]);\n    \n    // useEffect(() => {\n    //     async function fetchNews() {\n    //         try {\n    //             const response = await axios.get('http://localhost:3001/api/v1/news');\n    //             setNews(response.data.data.news);\n    //         } catch (error) {\n    //             console.error('Error fetching news:', error);\n    //         }\n    //     }\n\n    //     fetchNews();\n    // }, []); \n\n\n    useEffect(() => {\n        fetchNews();\n    }, []); \n\n    const fetchNews = async () => {\n        try {\n            const response = await axios.get('http://localhost:3001/api/v1/news');\n            setNews(response.data.data.news.reverse()); // Đảo ngược danh sách bài viết để bài mới nhất xuất hiện đầu danh sách\n        } catch (error) {\n            console.error('Error fetching news:', error);\n        }\n    };\n\n    \n    \n\n  const handleDeletePost = async (postId) => {\n    try {\n      // Gửi yêu cầu DELETE đến API endpoint để xóa bài post\n      await axios.delete(`http://localhost:3001/api/v1/posts/${postId}`);\n\n      // Cập nhật state để loại bỏ bài post đã xóa\n    //   const updatedNews = news.filter(item => item._id !== postId);\n    //   setNews(updatedNews);\n    fetchNews();\n    } catch (error) {\n      console.error('Error deleting post:', error);\n    }\n  };\n\n    return (\n    <div>\n        <Grid container spacing={2} alignItems='stretch' justifyContent=\"center\" style={{paddingTop:\"20px\"}}>\n            {news.map((item) => (\n                <Grid item xs={12} sm={6} key={item._id} >\n                    <Post \n                        key={item._id}\n                        newId = {item._id}\n                        title={item.title}\n                        image={item.image}\n                        content={item.content}\n                        author={item.author}\n                        onDelete={() => handleDeletePost(item._id)}  \n                        createdAt={moment(item.createdAt).format('YYYY-MM-DD')}\n                    />\n                </Grid>\n            ))}\n        </Grid>\n\n    </div>\n        \n    );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,mBAAmB;AACxC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,MAAM,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAGAD,SAAS,CAAC,MAAM;IACZY,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,mCAAmC,CAAC;MACrEH,OAAO,CAACE,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACL,IAAI,CAACM,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAKH,MAAME,gBAAgB,GAAG,MAAOC,MAAM,IAAK;IACzC,IAAI;MACF;MACA,MAAMjB,KAAK,CAACkB,MAAM,CAAE,sCAAqCD,MAAO,EAAC,CAAC;;MAElE;MACF;MACA;MACAR,SAAS,CAAC,CAAC;IACX,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAEC,oBACAV,OAAA;IAAAe,QAAA,eACIf,OAAA,CAACL,IAAI;MAACqB,SAAS;MAACC,OAAO,EAAE,CAAE;MAACC,UAAU,EAAC,SAAS;MAACC,cAAc,EAAC,QAAQ;MAACC,KAAK,EAAE;QAACC,UAAU,EAAC;MAAM,CAAE;MAAAN,QAAA,EAC/FZ,IAAI,CAACmB,GAAG,CAAEC,IAAI,iBACXvB,OAAA,CAACL,IAAI;QAAC4B,IAAI;QAACC,EAAE,EAAE,EAAG;QAACC,EAAE,EAAE,CAAE;QAAAV,QAAA,eACrBf,OAAA,CAACH,IAAI;UAED6B,KAAK,EAAIH,IAAI,CAACI,GAAI;UAClBC,KAAK,EAAEL,IAAI,CAACK,KAAM;UAClBC,KAAK,EAAEN,IAAI,CAACM,KAAM;UAClBC,OAAO,EAAEP,IAAI,CAACO,OAAQ;UACtBC,MAAM,EAAER,IAAI,CAACQ,MAAO;UACpBC,QAAQ,EAAEA,CAAA,KAAMpB,gBAAgB,CAACW,IAAI,CAACI,GAAG,CAAE;UAC3CM,SAAS,EAAEnC,MAAM,CAACyB,IAAI,CAACU,SAAS,CAAC,CAACC,MAAM,CAAC,YAAY;QAAE,GAPlDX,IAAI,CAACI,GAAG;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQhB;MAAC,GAVyBf,IAAI,CAACI,GAAG;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWjC,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEN,CAAC;AAGV;AAACpC,EAAA,CArEuBD,QAAQ;AAAAsC,EAAA,GAARtC,QAAQ;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}